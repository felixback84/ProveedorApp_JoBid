var addCallbackSupport = function(render) {
  var callbacks = {};
  var first = true;
  var registerCallback = function(keys, callback) {
    for (var i=0; i<keys.length; i++) {
      var name = keys[i];
      if (typeof callbacks[name] === "undefined") {
        callbacks[name] = [callback];
      } else {
        callbacks[name].push(callback);
      }
    }
  };
  return function(props) {
    props['registerCallback'] = registerCallback;
    console.log('Calling back with', props['changes']);
    if (first) {
      first = false;
      render(props)
    } else {
      var called = [];
      for (name in props.changeState) {
        if (props.changeState.hasOwnProperty(name)) {
          if (typeof callbacks[name] !== "undefined") {
            for (var j=0; j<callbacks[name].length; j++) {
              if (called.indexOf(callbacks[name][j]) === -1) {
                called.push(callbacks[name][j]);
                console.log('Calling', callbacks[name][j], 'with', props);
                callbacks[name][j](props);
              }
            }
          }
        }
      }
    }
  };
};

module.exports = addCallbackSupport;
