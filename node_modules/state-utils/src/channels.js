'use strict';

var uuid = require('node-uuid');
var url = require('url');
var qs = require('querystring');

var channels = {};
var send = function(channel, msg, now) {
  channels[channel].last = now;
  channels[channel].msgs.push(msg);
  if (channels[channel].res) {
    var msgs = channels[channel].msgs;
    delete channels[channel].msgs;
    channels[channel].msgs = [];
    var body = JSON.stringify({
      channel:channel,
      msgs: msgs,
    });
    channels[channel].res.writeHead(
      200,
      {
        'Content-Type': 'application/json',
        'Content-Length': body.length,
        'Connection': 'Keep-Alive',
        'Cache-Control': 'no-cache',
      }
    );
    channels[channel].res.write(body);
    channels[channel].res.end();
    delete channels[channel].res;
  }
};

var handleMsgPost = function(req, res) {
  var body = '';
  var killed = false;
  req.on('data', function (data) {
    body += data;
    // Too much POST data, kill the connection!
    if (body.length > 1e6) {
      req.connection.destroy();
      killed = true;
    }
  });
  req.on('end', function () {
    if (!killed) {
      // var post = qs.parse(body);
      var sendNow = new Date();
      var id = sendNow.toLocaleTimeString();
      var msg = {id: id, msg: body};
      for (var channel in channels) {
        if (channels.hasOwnProperty(channel)) {
          send(channel, msg, sendNow);
        }
      }
      res.writeHead(200, {'Content-Type': 'text/plain', 'Content-Length': '2'});
      res.write('OK');
      res.end();
    }
  });
  return;
};

var handleChannel = function(req, res) {
  var newChannel = false;
  var channel;
  var now = new Date();
  var parts = url.parse(req.url, true);
  if (!parts.query.channel) {
    channel = uuid.v4();
    channels[channel] = {last: now, msgs: []};
    newChannel = true;
  } else {
    channel = parts.query.channel;
    if (!channels[channel]) {
      newChannel = true;
      channels[channel] = {last: now, msgs: []};
    }
  }
  if (channels[channel].res) {
    channels[channel].res.end();
    delete channels[channel].res;
  }
  req.socket.setNoDelay(true);
  req.socket.setTimeout(Number.MAX_VALUE);
  res.sendDate = false;
  channels[channel].res = res;
  return {
    id: channel,
    channel: channels[channel],
    isNew: newChannel,
    now: now
  };
};

module.exports = {
  handleMsgPost: handleMsgPost,
  handleChannel: handleChannel,
  send: send
};
