/*global window: false, document: false, ActiveXObject: false */
'use strict';

var PollSource = function(url) {
  var nextTimeout = 0;
  var interval= null;
  var lastTime = null;
  // IE8 doesn't support this
  if (window.addEventListener) {
    window.addEventListener("online", function() {
      lastTime = null;
    }, false);
  }
  function remote(method, path, callback) {
    require('./net')(method, path).then(function(res) {
      var error = false;
      var data = null;
      try {
        data = JSON.parse(res);
      } catch (e) {
        callback(e, null);
        error = true;
      }
      if (!error) {
        nextTimeout = 0;
        lastTime = null;
        callback(null, data);
      }
    }).catch(function(e){
      callback(e+' - Could not connect. Next attempt: '+nextTimeout, null);
    });
  }
  function poll(url, channel, callback) {
    lastTime = new Date().getTime();
    remote("GET", url+'?channel='+channel+'&date='+(new Date()).getTime(), function(err, result) {
      if (result) {
        channel = result.channel;
        console.log('Channel is: ' + channel);
      }
      callback(err, result);
      if (err) {
        console.log('Error');
        if (nextTimeout < 10000) {
          nextTimeout = nextTimeout + 500;
        }
        interval = setInterval(
          function() {
            var curTime = (new Date()).getTime();
            if (!lastTime || curTime > lastTime + nextTimeout) {
              console.log('Making another request...');
              clearInterval(interval);
              poll(url, channel, callback);
            } else {
              console.log('Waiting');
            }
          },
          500 // How often to test whether it is time to have a re-connection attempt.
        );
      } else {
        console.log('Success');
        poll(url, channel, callback);
      }
    });
  }
  var self = this;
  poll("/poll", '', function(err, res) {
    console.log(res);
    if (err && self.onerror) {
      self.onerror(err);
    } else if (res && self.onmessage) {
      self.onmessage(res);
    }
  });
};

module.exports = PollSource;
