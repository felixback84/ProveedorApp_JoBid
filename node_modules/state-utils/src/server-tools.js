var path = require('path');
var fs = require('fs');
var url = require('url');


var handleFile = function(base, req, res) {
  var reqURL = url.parse(req.url);
  var filePath = base + reqURL.pathname;
  if (filePath === base + '/') {
    filePath = base + '/index.html';
  }
  console.log('[file] '+ filePath);
  var extname = path.extname(filePath);
  var contentType = 'text/html';
  switch (extname) {
    case '.js':
      contentType = 'text/javascript';
      break;
    case '.css':
      contentType = 'text/css';
      break;
    case '.json':
      contentType = 'application/json';
      break;
    case '.png':
      contentType = 'image/png';
      break;    
    case '.jpg':
      contentType = 'image/jpg';
      break;
    case '.txt':
      contentType = 'text/plain';
      break;
    case '.csv':
      contentType = 'text/csv';
      break;
  }
  
  fs.readFile(filePath, function(error, content) {
    if (error) {
      if(error.code == 'ENOENT'){
        res.writeHead(404, {'Content-Type': 'text/plain'});
        res.write('Not Found');
        res.end();
      }
      else {
        res.writeHead(500);
        res.end('Sorry, check with the site admin for error: '+error.code+' ..\n');
        res.end(); 
      }
    }
    else {
      res.writeHead(200, { 'Content-Type': contentType });
      res.end(content);
    }
  });
};


function enableDestroy(server) {
  var connections = {};

  server.on('connection', function(conn) {
    var key = conn.remoteAddress + ':' + conn.remotePort;
    console.log('[server] New connection from ', key);
    connections[key] = conn;
    conn.on('close', function() {
      //console.log('[server] Closed connection from ', key);
      delete connections[key];
    });
  });

  server.destroy = function(cb) {
    server.close(cb);
    for (var key in connections)
      //console.log('[server] Destroying connection ', key);
      connections[key].destroy();
  };
}


module.exports = {
  handleFile: handleFile,
  enableDestroy: enableDestroy
}
