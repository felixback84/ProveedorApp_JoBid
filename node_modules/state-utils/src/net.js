'use strict';

var Promise = require('native-promise-only');
// var xdrRequests = [];
if (typeof window !== "undefined") {
  if (typeof window.XMLHttpRequest === "undefined") {
    window.XMLHttpRequest = function () {
      try { return new ActiveXObject("Msxml2.XMLHTTP.6.0"); }
      catch (e) {}
      try { return new ActiveXObject("Msxml2.XMLHTTP.3.0"); }
      catch (e) {}
      try { return new ActiveXObject("Microsoft.XMLHTTP"); }
      catch (e) {}
      throw new Error("This browser does not support XMLHttpRequest.");
    };
    console.log(window.XMLHttpRequest);
  }
  
  var remote = function(method, path, body) {
    var origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port: '');
    if (path.substr(0, 1) === '/') {
      path = origin + path;
      // console.log('Adding the origin to the path for IE8');
    }
    return new Promise(
      function (resolve, reject) {
        var xdr;
        try {
          var xmlhttp = new window.XDomainRequest(); 
          xdr = true;
        } catch (e) {
          xdr = false;
        }
        if (xdr) {
          if (path.substr(0, origin.length + 1) === origin+'/') {
            // Same origin, don't use xdr
            xdr = false;
            // console.log('Not using xdr, because path is local');
          }
        }
        if (xdr) {
          if (window.location.protocol !== path.substr(0, window.location.protocol.length)) {
            reject('In IE8, the scheme for the page origin and the requested URL must be the same.\n\nCannot access: '+path);
            return;
          } 
          xmlhttp.onload = function() {
            resolve(xmlhttp.responseText);
          }
          xmlhttp.onerror = reject;
          xmlhttp.ontimeout = reject;
          xmlhttp.onprogress = function() {};
          xmlhttp.timeout = 10000;

          try {
            xmlhttp.open(method, path);
          } catch (e) {
            reject(e);
          }
        } else {
          var xmlhttp = new XMLHttpRequest();
          xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == 4 && xmlhttp.status==200) {
              resolve(xmlhttp.responseText);
            } else if (xmlhttp.readyState == 4) {
              reject('Non-200 response: '+xmlhttp.status+' ['+xmlhttp.responseText+']');
            }
          };
          xmlhttp.open(method, path, true);
        }
        if (typeof body !== "undefined") {
          xmlhttp.send(body);
        } else {
          // console.log('Send');
          xmlhttp.send();
          // Keep a reference to the XDomainRequest object around to avoid.
          // IE8's buggy garbage collector from destroying it.
          // xdrRequests.push(xmlhttp);
        }
      }
    );
  }
} else {
  var remote = function(method, path, body) {
    throw 'Not supported';
  }
}

module.exports = remote;
